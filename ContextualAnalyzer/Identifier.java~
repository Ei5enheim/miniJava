/*
 * File:    Identifier.java
 * Author:  Rajesh Gopidi
 * PID:     720367703
 * Course : COMP520
 */
package miniJava.ContextualAnalyzer;

import miniJava.AbstractSyntaxTress.*;

public class Identifier implements Visitor<String,Object> {
	
    public static boolean showPosition = false;
    private static boolean reportError = false;
    private SymbolTable table;
    
    public Identifier() 
    {
        // we are going to use the same table for both walks as 
        // everything added in the first walk will be removed
        table = new SymbolTable();
        // add the standard env here and do not forget to increment the level
    }

    public void Identify (AST ast) 
    {
        ast.visit(this, null);
        reportError = true;
        ast.visit(this,null);
    }   
    
    // Package
    public Object visitPackage(Package prog, String arg)
    {
    
        ClassDeclList cl = prog.classDeclList;
        for (ClassDecl c: prog.classDeclList){
            c.visit(this, null);
        }
        return null;
    }
    
    
  // Declarations
    public Object visitClassDecl(ClassDecl clas, String arg){
       
        // need to add the exit(4) code in the symbol table
        table.add(clas.name, clas);

        table.newScope(true); 

        for (FieldDecl f: clas.fieldDeclList)
        	f.visit(this, null);

        for (MethodDecl m: clas.methodDeclList)
        	m.visit(this, null);

        return null;
    }
    
    public Object visitFieldDecl(FieldDecl f, String arg) {
        
        table.add(f.name, f);
        return null;
    }
    
    public Object visitMethodDecl(MethodDecl m, String arg){
       
        table.add(m.name, m);
        table.newScope(true); 

        ParameterDeclList pdl = m.parameterDeclList;

        for (ParameterDecl pd: pdl) {
            pd.visit(this, null);
        }

        StatementList sl = m.statementList;

        for (Statement s: sl) {
            s.visit(this, null);
        }
        if (m.returnExp != null) {
            m.returnExp.visit(this, null);
        }
        closeScope(true);
        return null;
    }
    
    public Object visitParameterDecl(ParameterDecl pd, String arg) 
    {
        table.add(pd.name, pd);
        return null;
    } 
    
    public Object visitVarDecl(VarDecl vd, String arg)
    {

        table.add(vd.name, vd);
        return null;
    }
 
    // Statements
    public Object visitBlockStmt(BlockStmt stmt, String arg)
    {
        StatementList sl = stmt.sl;
        table.newScope();
        for (Statement s: sl) {
        	s.visit(this, null);
        }
        table.closeScope();
        return null;
    }
    
    public Object visitVardeclStmt(VarDeclStmt stmt, String arg){
        
        if (stmt.initExp != null)
            stmt.initExp.visit(this, null);
        stmt.varDecl.visit(this, null);
        return null;
    }
    
    public Object visitAssignStmt(AssignStmt stmt, String arg){
        stmt.ref.visit(this, null);
        stmt.val.visit(this, null);
        return null;
    }
    
    public Object visitCallStmt(CallStmt stmt, String arg){
        stmt.methodRef.visit(this, null);
        ExprList al = stmt.argList;
        for (Expression e: al) {
            e.visit(this, null);
        }
        return null;
    }
    
    public Object visitIfStmt(IfStmt stmt, String arg){
        stmt.cond.visit(this, null);
        stmt.thenStmt.visit(this, null);
        if (stmt.elseStmt != null)
            stmt.elseStmt.visit(this, null);
        return null;
    }
    
    public Object visitWhileStmt(WhileStmt stmt, String arg){
        stmt.cond.visit(this, null);
        stmt.body.visit(this, null);
        return null;
    }
    
    
  // Expressions
    public Object visitUnaryExpr(UnaryExpr expr, String arg){
        expr.operator.visit(this, null);
        expr.expr.visit(this, null);
        return null;
    }
    
    public Object visitBinaryExpr(BinaryExpr expr, String arg){
        expr.operator.visit(this, thus);
        expr.left.visit(this, null);
        expr.right.visit(this, null);
        return null;
    }
    
    public Object visitRefExpr(RefExpr expr, String arg){
        expr.ref.visit(this, null);
        return null;
    }
    
    public Object visitCallExpr(CallExpr expr, String arg){
        expr.functionRef.visit(this, null);
        ExprList al = expr.argList;
        for (Expression e: al) {
            e.visit(this, null);
        }
        return null;
    }
    
    public Object visitLiteralExpr(LiteralExpr expr, String arg){
        expr.literal.visit(this, null);
        return null;
    }
 
    public Object visitNewArrayExpr(NewArrayExpr expr, String arg){
        expr.eltType.visit(this, null);
        expr.sizeExpr.visit(this, null);
        return null;
    }
    
    public Object visitNewObjectExpr(NewObjectExpr expr, String arg){
        expr.classtype.visit(this, null);
        return null;
    }
    
   
  // References
    
    public Object visitQualifiedRef(QualifiedRef qr, String arg) {
    	show(arg, qr);
     	if (qr.thisRelative)
    			show(arg, "  this");
	    IdentifierList ql = qr.qualifierList;
	    if (ql.size() > 0)
	    	ql.get(0).visit(this, indent(arg));
	    String pfx = ((String) indent(arg)) + ".";
	    for (int i = 1; i < ql.size(); i++) {
	    	ql.get(i).visit(this, pfx);
	    }
	    return null;
    }
    
    public Object visitIndexedRef(IndexedRef ir, String arg) {
    	show(arg, ir);
    	ir.ref.visit(this, indent(arg));
    	ir.indexExpr.visit(this, indent(arg));
    	return null;
    }
    
    public Reference visitQualifiedRef(QualifiedRef ref);
    public ResultType visitIndexedRef(IndexedRef ref, ArgType arg);
    public ResultType visitLocalRef(LocalRef ref, ArgType arg);
    public ResultType visitMemberRef(MemberRef ref, ArgType arg);
    public ResultType visitClassRef(ClassRef ref, ArgType arg);
    public ResultType visitThisRef(ThisRef ref, ArgType arg);
    public ResultType visitDeRef(DeRef ref, ArgType arg);

    
  // Terminals
    public Object visitIdentifier(Identifier id, String arg){
        show(arg, "\"" + id.spelling + "\" " + id.toString());
        return null;
    }
    
    public Object visitOperator(Operator op, String arg){
        show(arg, "\"" + op.spelling + "\" " + op.toString());
        return null;
    }
    
    public Object visitIntLiteral(IntLiteral num, String arg){
        show(arg, "\"" + num.spelling + "\" " + num.toString());
        return null;
    }
    
    public Object visitBooleanLiteral(BooleanLiteral bool, String arg){
        show(arg, "\"" + bool.spelling + "\" " + bool.toString());
        return null;
    }

    public void reportError(String str) 
    {
        // add the code here 
        Sytem.exit(4);
    }
}
